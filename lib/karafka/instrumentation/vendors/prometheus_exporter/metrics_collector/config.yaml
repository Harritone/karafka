worker_threads:
  type: Gauge
  description: Number of worker threads assigned to a Karafka server for processing messages. Is not the same as the number of threads in the thread pool.
  scope: worker
  source: karafka
worker_threads_busy:
  type: Gauge
  description: Number of worker threads that are currently busy processing messages.
  scope: worker
  source: karafka
worker_enqueued_jobs:
  type: Histogram
  description: Number of jobs waiting to be processed while workers are busy.
  scope: worker
  source: karafka
  buckets: [0, 1, 5, 10, 25, 50, 100, 250, 500, 1_000]
listener_polling_time_seconds:
  type: Histogram
  description: Time between two message polling cycles in a consumer. #  If a consumer is healthy it should be close or equal to the max_wait_time.
  scope: listener
  source: karafka
  conversion: milliseconds_to_seconds # karafka sends measurements in milliseconds
  buckets: [0.25, 0.5, 1, 1.25, 1.5, 2, 2.5, 5.0, 10.0, 20.0, 60.0, 100.0, 180.0, 300.0]
listener_polling_messages:
  type: Histogram
  description: Number of messages fetched in a single polling cycle.
  scope: listener
  source: karafka
  buckets: [0, 1, 5, 10, 25, 50, 100, 250, 500, 1_000]
dead_letter_queue_total:
  type: Counter
  description: Number of messages that were sent to the dead letter queue.
  scope: consumer
  source: karafka
consumer_messages_total:
  type: Counter
  description: Number of messages consumed by a consumer.
  scope: consumer
  source: karafka
consumer_batches_total:
  type: Counter
  description: Number of message batches consumed by a consumer.
  scope: consumer
  source: karafka
consumer_offset:
  type: Gauge
  description: Current offset of a consumer.
  scope: consumer
  source: karafka
consumer_consumed_time_taken_seconds:
  type: Histogram
  description: Time taken to consume a batch of messages.
  scope: consumer
  source: karafka
  conversion: milliseconds_to_seconds # karafka sends measurements in milliseconds
  buckets: [0.5, 1, 2.5, 5.0, 10.0, 30.0, 60.0, 90.0, 120.0, 180.0, 240.0, 300.0]
consumer_batch_size:
  type: Histogram
  description: Number of messages in a batch of messages when polled.
  scope: consumer
  source: karafka
  buckets: [0, 1, 5, 10, 25, 50, 100, 250, 500, 1_000]
consumer_processing_lag_seconds:
  type: Histogram
  description: Elapsed time between batch consumption job being scheduled and batch job completion
  scope: consumer
  source: karafka
  conversion: milliseconds_to_seconds # karafka sends measurements in milliseconds
  buckets: [0.5, 1, 2.5, 5.0, 10.0, 30.0, 60.0, 90.0, 120.0, 180.0, 240.0, 300.0]
consumer_consumption_lag_seconds:
  type: Histogram
  description: Elapsed time between batch creation and batch consumption
  scope: consumer
  source: karafka
  conversion: milliseconds_to_seconds # karafka sends measurements in millisecond
  buckets: [0.01, 0.025, 0.1, 0.25, 0.5, 1, 2.5, 5.0, 10.0, 30.0, 60.0]
consumer_revoked_total:
  type: Counter
  description: Amount of consumers that were revoked.
  scope: consumer
  source: karafka
consumer_error_total:
  type: Counter
  description: Number of errors that occurred in a karafka consumer.
  scope: consumer
  source: karafka
consumer_shutdown_total:
  type: Counter
  description: Number of consumers that were shutdown.
  scope: consumer
  source: karafka
app_stopped_total:
  type: Counter
  description: Number of times the app was stopped.
  scope: consumer
  source: karafka
messages_consumed_total:
  type: Counter
  description: librdkafka - the total number of messages consumed.
  scope: root
  source: rd_kafka
  key_location: [rxmsgs_d]
messages_consumed_bytes_total:
  type: Counter
  description: librdkafka - the total number of (message) bytes consumed.
  scope: root
  source: rd_kafka
  key_location: [rxmsg_bytes]
consume_errors_total:
  type: Counter
  description: librdkafka - the total number of errors consuming messages.
  scope: brokers
  source: rd_kafka
  key_location: [txerrs_d]
connection_attempts_total:
  type: Counter
  description: librdkafka - the total number of connection attempts.
  scope: brokers
  source: rd_kafka
  key_location: [connects_d]
connection_disconnects_total:
  type: Counter
  scope: brokers
  description: Number of disconnects (triggered by broker network load-balancer etc.).
  source: rd_kafka
  key_location: [disconnects_d]
consumer_lags:
  type: Gauge
  description: Difference between the last stable offset on the broker and the offset to be committed on the broker
  scope: topics
  source: rd_kafka
  key_location: [consumer_lag_stored]
consumer_lags_delta:
  type: Gauge
  description: Difference of the previous consumer_lags and the current consumer_lags
  source: rd_kafka
  scope: topics
  key_location: [consumer_lag_stored_d]
# Producer metrics TODO: Move to Waterdrop PR
# producer_buffer_size:
#   type: Histogram
#   description: The number of messages waiting to be sent to the broker.
#   source: karafka
#   scope: producer
#   buckets: [0, 1, 5, 10, 25, 50, 100, 250, 500, 1_000]
# producer_error_total:
#   type: Counter
#   description: The total number of errors encountered while sending messages.
#   source: karafka
#   scope: producer
# producer_closed_total:
#   type: Counter
#   description: The total number of times the producer connection was closed.
#   source: karafka
#   scope: producer
# producer_messages_sent_total:
#   type: Counter
#   description: The total number of messages sent.
#   source: karafka
#   scope: producer
# producer_messages_acknowledged_total:
#   type: Counter
#   description: The total number of messages ack'd by the karafka before being sent to the broker.
#   source: karafka
#   scope: producer
request_retries_total:
  type: Counter
  description: librdkafka - brokers- the total number of request retries
  scope: brokers
  source: rd_kafka
  key_location: [txretries_d]
transmission_errors_total:
  type: Counter
  description: librdkafka - brokers - the total number of transmission errors.
  scope: brokers
  source: rd_kafka
  key_location: [txerrs_d]
receive_errors_total:
  type: Counter
  description: librdkafka - brokers - the total number of errors receiving messages.
  scope: brokers
  source: rd_kafka
  key_location: [rxerrs_d]
queue_latency_avg_seconds:
  type: Gauge
  description: librdkafka - average elapsed time in seconds between the request to enqueue to the transmit queue and the request being written to TCP socket
  scope: brokers
  source: rd_kafka
  key_location: [outbuf_latency, avg]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
queue_latency_p95_seconds:
  type: Gauge
  description: librdkafka - p95 elapsed time in seconds between the request to enqueue to the transmit queue and the request being written to TCP socket
  scope: brokers
  source: rd_kafka
  key_location: [outbuf_latency, p95]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
queue_latency_p99_seconds:
  type: Gauge
  description: librdkafka - p99 elapsed time in seconds between the request to enqueue to the transmit queue and the request being written to TCP socket
  scope: brokers
  source: rd_kafka
  key_location: [outbuf_latency, p99]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
network_latency_avg_seconds:
  type: Gauge
  description: librdkafka - broker round-trip time, per protocol request, between the request being written to the TCP socket and the time the response is received from the broker.
  scope: brokers
  source: rd_kafka
  key_location: [rtt, avg]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
network_latency_p95_seconds:
  type: Gauge
  description: librdkafka - broker round-trip time, per protocol request, between the request being written to the TCP socket and the time the response is received from the broker.
  scope: brokers
  source: rd_kafka
  key_location: [rtt, p95]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
network_latency_p99_seconds:
  type: Gauge
  description: librdkafka - broker round-trip time, per protocol request, between the request being written to the TCP socket and the time the response is received from the broker.
  scope: brokers
  source: rd_kafka
  key_location: [rtt, p99]
  conversion: microseconds_to_seconds # librdkafka sends measurements in microseconds
